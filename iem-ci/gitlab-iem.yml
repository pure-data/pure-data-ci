# CI-configuration for building Pd on various platforms, using IEM's GitLab CI


# hack! CI_CONFIG_PATH is unset when we use a remote...
variables:
  IEMCI_CONFIG_PATH: https://raw.githubusercontent.com/pure-data/pure-data-ci/master/iem-ci/gitlab-iem.yml
  PD_FLOATSIZE: 32


###################################################
### configuration templates (to be used for snapshot and release builds)
.build:snapshot: &snapshot
  except:
    - tags
  artifacts: &snapshot_artifacts
    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME%_*}
    paths:
      - Pd-*.*
    expire_in: 1 week

.build:release: &release
  only:
    - tags
  artifacts: &release_artifacts
    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME%_*}
    paths:
      - Pd-*.*

.build:linux: &build_linux
  image: gcc
  stage: build
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends automake libasound2-dev libjack-dev
  script:
    - ./autogen.sh
    - VERSION=$(egrep "^PACKAGE_VERSION=" configure | sed -e 's|^PACKAGE_VERSION=||' -e "s|'||g")
    - ./configure --prefix="/Pd-${VERSION}" --enable-alsa --enable-jack CPPFLAGS="-DPD_FLOATSIZE=${PD_FLOATSIZE}"
    - make
    - make install DESTDIR=$(pwd)/

.build:macos: &build_macos
  tags:
     - osx
  stage: build
  script:
    - ./autogen.sh
    - ./configure CPPFLAGS="-DPD_FLOATSIZE=${PD_FLOATSIZE}"
    - make
    - make app

.build:w32: &build_w32
  stage: build
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: mingw32 python2
  before_script:
    - wget -q -O msw/localdeps.sh "${IEMCI_CONFIG_PATH%/*}/localdeps.win.sh" && chmod +x msw/localdeps.sh || true
    - pacman --noconfirm -S --needed "${MINGW_PACKAGE_PREFIX}-ntldd"
    - wget http://www.steinberg.net/sdk_downloads/asiosdk2.3.zip
    - unzip -q asiosdk2.3.zip -d asio
    - mv asio/ASIOSDK2.3 asio/ASIOSDK
  script:
    - ./autogen.sh
    - ./configure CPPFLAGS="-DPD_FLOATSIZE=${PD_FLOATSIZE}"
    - make
    - make app
    - for d in pd-*.*/; do d=${d%/}; mv -T -v "${d}" "Pd-${d#pd-}"; done || true
    - rm -f Pd-*.*/bin/libwinpthread-1.dll Pd-*.*/bin/msvc*.dll
    - find Pd-*.*/ "(" -name "*.exe" -o -name "*.dll" ")" -exec msw/localdeps.sh {} + || true

.build:w64: &build_w64
  stage: build
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: mingw64 python2
  before_script:
    - wget -q -O msw/localdeps.sh "${IEMCI_CONFIG_PATH%/*}/localdeps.win.sh" && chmod +x msw/localdeps.sh || true
    - pacman --noconfirm -S --needed "${MINGW_PACKAGE_PREFIX}-ntldd"
    - wget http://www.steinberg.net/sdk_downloads/asiosdk2.3.zip
    - unzip -q asiosdk2.3.zip -d asio
    - mv asio/ASIOSDK2.3 asio/ASIOSDK
  script:
    - ./autogen.sh
    - ./configure CPPFLAGS="-DPD_FLOATSIZE=${PD_FLOATSIZE}"
    - make
    - make app
    - for d in pd-*.*/; do d=${d%/}; mv -T -v "${d}" "Pd-${d#pd-}"; done || true
    - rm -f Pd-*.*/bin/libwinpthread-1.dll Pd-*.*/bin/msvc*.dll
    - find Pd-*.*/ "(" -name "*.exe" -o -name "*.dll" ")" -exec msw/localdeps.sh {} + || true

.build:linuxmake:
  extends: .build:linux
  script:
    - VERSION=$(git describe --tags || echo 0.0)
    - make -C src -f makefile.gnu prefix="/Pd-${VERSION}" DESTDIR=$(pwd)/
    - make -C src -f makefile.gnu prefix="/Pd-${VERSION}" DESTDIR=$(pwd)/ install
    - make -C src -f makefile.gnu prefix="/Pd-${VERSION}" DESTDIR=$(pwd)/ clean

.build:macosmake:
  extends: .build:macos
  script:
    - VERSION=$(git describe --tags || echo 0.0)
    - make -C src -f makefile.mac MACOSX_DEPLOYMENT_TARGET=10.6 ARCH="" EXTRAARCH="" prefix="/Pd-${VERSION}" DESTDIR=$(pwd)/
    - make -C src -f makefile.mac MACOSX_DEPLOYMENT_TARGET=10.6 ARCH="" EXTRAARCH="" prefix="/Pd-${VERSION}" DESTDIR=$(pwd)/ install
    - make -C src -f makefile.mac MACOSX_DEPLOYMENT_TARGET=10.6 ARCH="" EXTRAARCH="" prefix="/Pd-${VERSION}" DESTDIR=$(pwd)/ clean

.build:w32make:
  extends: .build:w32
  script:
    - VERSION=$(git describe --tags || echo 0.0)
    - make -C src -f makefile.mingw prefix="/Pd-${VERSION}" DESTDIR=$(pwd)/
    - make -C src -f makefile.mingw prefix="/Pd-${VERSION}" DESTDIR=$(pwd)/ install
    - make -C src -f makefile.mingw prefix="/Pd-${VERSION}" DESTDIR=$(pwd)/ clean

.build:w64make:
  extends: .build:w64
  script:
    - VERSION=$(git describe --tags || echo 0.0)
    - make -C src -f makefile.mingw prefix="/Pd-${VERSION}" DESTDIR=$(pwd)/
    - make -C src -f makefile.mingw prefix="/Pd-${VERSION}" DESTDIR=$(pwd)/ install
    - make -C src -f makefile.mingw prefix="/Pd-${VERSION}" DESTDIR=$(pwd)/ clean

###################################################
### the actual jobs: (linux,macos,windows)*(release,snapshot)

Linux:
  <<: *build_linux
  <<: *release
Darwin:
  <<: *build_macos
  <<: *release
w32:
  <<: *build_w32
  <<: *release
w64:
  <<: *build_w64
  <<: *release


Linux_snapshot:
  <<: *build_linux
  <<: *snapshot
Darwin_snapshot:
  <<: *build_macos
  <<: *snapshot
w32_snapshot:
  <<: *build_w32
  <<: *snapshot
w64_snapshot:
  <<: *build_w64
  <<: *snapshot

Linux_make:
  extends: .build:linuxmake
  <<: *snapshot
Darwin_make:
  extends: .build:macosmake
  allow_failure: true
  <<: *snapshot
w32_make:
  extends: .build:w32make
  allow_failure: true
  <<: *snapshot
w64_make:
  extends: .build:w64make
  allow_failure: true
  <<: *snapshot

Linux_double_snapshot:
  extends: Linux_snapshot
  variables:
    PD_FLOATSIZE: 64
Darwin_double_snapshot:
  extends: Darwin_snapshot
  variables:
    PD_FLOATSIZE: 64
w32_double_snapshot:
  extends: w32_snapshot
  variables:
    PD_FLOATSIZE: 64
w64_double_snapshot:
  extends: w64_snapshot
  variables:
    PD_FLOATSIZE: 64

Linux_double:
  extends: Linux
  variables:
    PD_FLOATSIZE: 64
Darwin_double:
  extends: Darwin
  variables:
    PD_FLOATSIZE: 64
w32_double:
  extends: w32
  variables:
    PD_FLOATSIZE: 64
w64_double:
  extends: w64
  variables:
    PD_FLOATSIZE: 64


deken:
  stage: deploy
  image: debian:buster
  allow_failure: true
  only:
    - tags
  variables:
    DEKEN_ROOT: "yes"
  before_script:
    - apt-get update && apt-get --no-install-recommends -y install deken git
  script:
    - git archive --format=tar --prefix=tmp/${CI_PROJECT_NAME}/ HEAD | tar xf -
    - deken package --version="${CI_COMMIT_TAG#v}" "tmp/${CI_PROJECT_NAME}"
    - deken package --version="${CI_COMMIT_TAG#v}" "${CI_PROJECT_NAME}"
    - test -z "${DEKEN_USERNAME}" || test -z "${DEKEN_PASSWORD}" || deken upload --no-source-error ./*.dek
