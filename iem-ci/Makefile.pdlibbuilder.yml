---
# iem-ci configuration for testing the Makefile.pdlibbuilder itself

variables:
  PDVERSION: 0.50-2

#######################################################################
### script snippets

## build snippets
.script:make: &script_make
  - make -C tests ${pd_extension:+extension=}${pd_extension}
.script:make_buildcheck: &script_make_buildcheck
  - if make -C tests buildcheck -n ${pd_extension:+extension=}${pd_extension} >/dev/null 2>&1 ; then make -C tests check ${pd_extension:+extension=}${pd_extension}; else echo "no 'buildcheck' target...skipping"; fi
.script:make_installcheck: &script_make_installcheck
  - if make -C tests installcheck -n ${pd_extension:+extension=}${pd_extension} >/dev/null 2>&1 ; then make -C tests installcheck DESTDIR=$(pwd)/tests/_installcheck ${pd_extension:+extension=}${pd_extension}; else echo "no 'installcheck' target...skipping"; fi


#######################################################################
### configuration templates (to be used for snapshot and release builds)
.build:snapshot: &snapshot
  except:
    - tags
  artifacts: &snapshot_artifacts
    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME%_*}
    paths:
      - tests
    expire_in: 1 week

.build:release: &release
  only:
    - tags
  artifacts: &release_artifacts
    name: ${CI_PROJECT_NAME}_${CI_COMMIT_REF_NAME}_${CI_JOB_NAME%_*}
    paths:
      - tests

.build:script:
  extends: .build:snapshot
  script:
    - *script_make


#######################################################################
### the actual jobs

linux: &build_linux
  extends: .build:script
  image: gcc
  before_script:
    - apt-get update && apt-get install -y --no-install-recommends make puredata-dev puredata-core
    - if [ -e .git-ci/requirements.apt ]; then apt-get install -y --no-install-recommends $(cat .git-ci/requirements.apt | sed -e '/^#/d'); fi
    - export PD=/usr/bin/pd

macos: &build_macos
  extends: .build:script
  tags:
    - osx
  before_script:
    - wget -q -O Pd.tgz http://msp.ucsd.edu/Software/pd-${PDVERSION}.mac.tar.gz
    - rm -rf /Applications/Pd*.app/
    - tar xvf Pd.tgz -C /Applications/
    - rm -f Pd.tgz
    - export PD=$(find /Applications/Pd*.app/Contents/Resources/bin/ type f -name pd -print -quit)

w32: &build_w32
  extends: .build:script
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: mingw32
  before_script:
    - wget -q -O Pd.zip http://msp.ucsd.edu/Software/pd-${PDVERSION}-i386.msw.zip
    - rm -rf "${PROGRAMFILESX86}/pd" && mkdir -p "${PROGRAMFILESX86}/pd"
    - unzip -q Pd.zip -d "${PROGRAMFILESX86}/pd"
    - mv -v "${PROGRAMFILESX86}/pd"/*/* "${PROGRAMFILESX86}/pd"
    - rm -f Pd.zip
    - export PD="${PROGRAMFILESX86}/pd/bin/pd.com"

w64: &build_w64
  extends: .build:script
  tags:
    - windows
  variables:
    IEMCI_CONFIGURATIONS: mingw64
    pd_extension: m_amd64
  before_script:
    - wget -q -O Pd.zip http://msp.ucsd.edu/Software/pd-${PDVERSION}.msw.zip
    - rm -rf "${PROGRAMFILES}/pd" && mkdir -p "${PROGRAMFILES}/pd"
    - unzip -q Pd.zip -d "${PROGRAMFILES}/pd"
    - mv -v "${PROGRAMFILES}/pd"/*/* "${PROGRAMFILES}/pd"
    - rm -f Pd.zip
    - export PD="${PROGRAMFILES}/pd/bin/pd.com"
